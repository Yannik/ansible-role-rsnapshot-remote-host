- name: Ensure ssh server package is installed
  package: name={{ item }} state=present
  with_items:
    - "{{ rsnapshot_ssh_server_package }}"
  register: rsnapshot_ssh_server_installed
  when: rsnapshot_install_packages

- name: Ensure rsync and sudo are installed
  package: name={{ item }} state=present
  with_items:
    - rsync
    - sudo
  when: rsnapshot_install_packages

- name: Ensure ssh server service is enabled
  service: name={{ rsnapshot_ssh_server_service }} state=started enabled=yes
  register: rsnapshot_ssh_server_enabled
  when: rsnapshot_ssh_enable

# The forced command is run through a shell, so we can't set a /sbin/nologin shell.
# Using /bin/sh does however disable any bashis'ms or a global bashrc which may
# not be setup for tty-less connections.
- name: Ensure backupro user exists
  user: name=backupro group={{ rsnapshot_backupro_group|default(omit) }} shell=/bin/sh
  when: rsnapshot_create_user

- name: Create ssh directory
  file:
    name: "{{ rsnapshot_home_dir }}/backupro/.ssh"
    state: directory
    owner: backupro
    group: "{{ rsnapshot_backupro_group|default('backupro') }}"

# This doesn't work in ansible >2.0, as it uses agent forwarding (security risk!)
#- name: Copy ssh key of backup pulling host
#  synchronize:
#    src: /test
#    dest: /test
#  delegate_to: n54l

- name: Fetch ssh key from backup pulling host
  fetch: src=/home/backuppuller/.ssh/id_rsa.pub dest=tmp-rsnapshot-ssh-key fail_on_missing=yes flat=yes
  delegate_to: "{{ rsnapshot_backup_host }}"
  changed_when: False
  when: testing is not defined

- name: Create ssh key for testing
  copy:
    content: "ssh-rsa AAAA== test@example.org"
    dest: ./tmp-rsnapshot-ssh-key
  delegate_to: 127.0.0.1
  changed_when: False
  when: testing is defined

- name: Add key to authorized_keys
  authorized_key:
    user: backupro
    key: "{{ lookup('file', 'tmp-rsnapshot-ssh-key') }}"
    key_options: "command=\"{{ rsnapshot_home_dir }}/backupro/.ssh/command-wrapper.sh\",no-agent-forwarding,no-port-forwarding,no-pty,no-user-rc,no-X11-forwarding"

- name: Fetch ssh hostkey
  fetch: src={{ rsnapshot_ssh_hostkey }} dest=tmp-rsnapshot-host-key fail_on_missing=yes flat=yes
  changed_when: False

# contains workaround for https://github.com/ansible/ansible/issues/63773
- name: Install hostkey on backup pulling host
  known_hosts:
    path: /home/backuppuller/.ssh/known_hosts
    name: "{{ ansible_host }}"
    key: "{{ ([ansible_host,ansible_fqdn] + [rsnapshot_external_hostname|default(ansible_host)]|default([], True) + ansible_all_ipv4_addresses|ipaddr('public')|default([], True) + ansible_all_ipv6_addresses|ipaddr('public')|default([], True))|unique|join(',') + ' ' + lookup('file', 'tmp-rsnapshot-host-key')|split(' ')|slice2(2)|first|join(' ') }}"
  delegate_to: "{{ item }}"
  with_items:
    - "{{ rsnapshot_backup_host }}"
  when: testing is not defined

- name: Remove temporary files from local host
  local_action: file state=absent path={{ item }}
  become: no
  with_items:
    - tmp-rsnapshot-host-key
    - tmp-rsnapshot-ssh-key
  changed_when: False

- name: Install rrsync
  template: src=rrsync dest="{{ rsnapshot_rrsync_path }}/rrsync" mode=755 owner={{ rsnapshot_root_user }}

- name: Make sure /var/log/rrsync.log is created with correct permissions
  copy: content="" dest=/var/log/rrsync.log mode=600 owner={{ rsnapshot_root_user }} force=no

# You can list the sudoers config for the backupro user like this: `sudo -U backupro -l`
- name: Add sudoers config
  blockinfile:
    dest: "{{ rsnapshot_sudoers_path }}"
    block: |
      backupro ALL=({{ rsnapshot_root_user }}) NOPASSWD: {{ rsnapshot_rrsync_path }}/rrsync
      backupro ALL=({{ rsnapshot_root_user }}) NOPASSWD: /etc/rsnapshot/backup-scripts/
      Defaults!{{ rsnapshot_rrsync_path }}/rrsync env_keep+="SSH_ORIGINAL_COMMAND SSH_CONNECTION"
    create: yes
    marker: "# {mark} rsnapshot-remote-host sudoers settings"
    validate: 'visudo -cf %s'

- name: Install ssh wrapper script
  template: src=command-wrapper.sh dest={{ rsnapshot_home_dir }}/backupro/.ssh/command-wrapper.sh owner={{ rsnapshot_root_user }} mode=655

- name: Install backup-scripts
  copy: src=backup-scripts dest=/etc/rsnapshot/ owner={{ rsnapshot_root_user }} mode=755

- name: Install custom backup-scripts
  copy: src={{ rsnapshot_backupscripts_path }} dest=/etc/rsnapshot/ owner=root mode=755
  when: rsnapshot_backupscripts_path is defined

- name: Print ssh server warning message
  pause: prompt="The ssh server just got enabled, make sure it is configured correctly!! (Disable password authentication!). Press enter to continue"
  when: ansible_distribution != "MacOSX" and (rsnapshot_ssh_server_installed is changed or rsnapshot_ssh_server_enabled is changed)
